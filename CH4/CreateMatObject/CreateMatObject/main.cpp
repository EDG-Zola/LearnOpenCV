/************************************************************************/
/*            OpenCV中有7种显示创建Mat对象的方法                        */
/************************************************************************/
#include <iostream>
#include <opencv2/opencv.hpp>
using namespace std;
using namespace cv;
int main(){
	/************************************************************************/
	/*          方法一：使用Mat()构造函数                                   */
	/************************************************************************/
	Mat M(2, 2, CV_8UC3, Scalar(0, 0, 255));
	cout << "M = " << endl << " " << M << endl << endl;

	/************************************************************************/
	/*          方法二：在C/C++中通过构造函数进行初始化                     */
	/*                    创建一个超过2维的矩阵                             */
	/************************************************************************/
	/*int sz[3] = {2, 2, 2};
	Mat L(3, sz, CV_8UC4, Scalar::all(0));
	cout << "L = " << endl << " " << L << endl << endl;*/

	/************************************************************************/
	/*       方法三：为已经存在的IplImage指针创建信                        */
	/************************************************************************/
	//IplImage* img = cvLoadImage("dota_logo.jpg", 1);
	//Mat mtx(img);//将IplImage指针转换为Mat类型
	//cout << "mtx = " << endl << " " << mtx << endl << endl;

	/************************************************************************/
	/*             方法四：利用Create创建函数                               */
	/************************************************************************/
	M.create(4, 4, CV_8UC(2));
	cout << "M = " << endl << " " << M << endl << endl;

	/************************************************************************/
	/*             方法五：采用Matlab式的初始化函数                         */
	/************************************************************************/
	Mat E = Mat::eye(4, 4, CV_64F);
	cout << "E = " << endl << " " << E << endl << endl;

	Mat O = Mat::ones(2, 2, CV_32F);
	cout << "O = " << endl << " " << O << endl << endl;

	Mat Z = Mat::zeros(3, 3, CV_8UC1);
	cout << "Z = " << endl << " " << Z << endl << endl;

	/************************************************************************/
	/*             方法六：对小矩阵使用逗号分隔式初始化函数                 */
	/************************************************************************/
	Mat C = (Mat_<double>(3, 3) << 0, -1, 0, -1, 5, -1, 0, -1, 0);
	cout << "C = " << endl << " " << C << endl << endl;

	/************************************************************************/
	/*                方法七：使用成员函数clone和                          */
	/*           copyTo为已经存在的Mat对象创建一个新的信息头               */
	/************************************************************************/
	Mat RowClone = C.row(1);
	cout << "RowClone = " << endl << " " << RowClone << endl << endl;
}
